Life cycle of angular code ts
================================
methods work only when you call the methods but constructor and ngonit works without calling

    constructor--> ngOnit--> other methods

Data binding in angular (data sharing in components)
====================================================

html - view

ts - component

    1. One way binding 
    ===================

        1.1 Component to view data sharing
        ----------------------------------

            1.1.1) String Interpolation     {{variable}} (eg :- this is provided in <h2>{{data}}</h2>)

            1.1.2) Property Binding         [property]="value" (eg :- [placeholder]="inputplaceholderdata")

        
        1.2 View to Component data sharing
        ----------------------------------

            1.2.1) Event Binding            (event)="method()" (eg :- (click)="login()")

            1.2.2) $event Binding           (event)="method($event)" (used to run event and accept data)

            1.2.3) Event Binding with               #variable
                    template rendering variable


    1. Two way binding :-
    ===================

        2.1 ngModel Method :-   [(ngModel)]="property"  Used by importing --- FormsModule

                                for using ngModel ensure unique name and id for input elements

                                By using ngModel, you can keep your component's state in sync with the user's input without
                                 having to manually handle updates to the input value or manually trigger updates to the
                                  component's state. This can greatly simplify the process of building forms in Angular
                                   and make it easier to manage their state.



    Redirection in Angular :-
    ==========================

        Module - AppRoutingModule
            Router  :-  A class used for Redirection in angular -!
                Method - navigateByUrl


    Dependency Injection :-
    =======================
    
               - done to inherit methods and variable between classes

                - It is done inside access specifiers

                - Access Specifiers :- Private/Public (private can me used only within class injected)

                - Reference/Object : ClassName

                - reference.method()

                - Router link in used instead of href


    Angular Services :-
    ===================

        to store and read data and methods that are accessible throughout the angular application

        - all components can access the data and methods in the service file easily.

        -- ng generate service serviceName  -- ng g s serviceName






